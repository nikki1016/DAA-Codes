#include <stdio.h>

struct node {
	int x;
	int y;
	struct node *prev;
	struct node *next;
}

void quick(int a[], int b[], int low, int up) {

	int pivloc;
	if (low >= up)
		return;
	pivloc = partition_cormen(a, b, low, up);
	quick(a, b, low, pivloc-1);
	quick(a, b, pivloc+1, up);
}

int partition_cormen(int a[], int b[], int low, int up)
{	
	int i, j, pivot, temp, t, p;
	pivot = a[up];
	p = b[up];
	i = low-1;
	
	for (j = low; j <= (up-1); j++) {
		if (a[j] <= pivot) {
			i = i+1;
			temp = a[i];
			a[i] = a[j];
			a[j] = temp;
			t = b[i];
			b[i] = b[j];
			b[j] = t;
		}
	}
	a[up] = a[i+1];
	a[i+1] = pivot;
	b[up] = b[i+1];
	b[i+1] = p;
	
	return (i+1);
}

int main()
{
	int n;
	struct node *l = NULL;
	scanf("%d", &n);
	int x[n];
	int y[n];

	for (i = 0; i < n; i++) {
		scanf("%d%d", &x[i], &y[i]);
	}

	quick(x, y, 0, n-1);

	l = convex_hull(n, x, y, 0, n-1);

	while (l != NULL) {
		printf("%d %d\n", l->x, l->y);
		l = l->next;
	}

	return 0;
}

struct node *convex_hull(int n, int x[], int y[], int l, int u)
{
	
	struct node *lhull, *rhull, *fhull;

	if (l == u-1){
		return dll_insert(x, y, n);
	}
	else if (l == u-2) {
		return dll_insert(x, y, n);
	}

	lhull = convex_hull(n, x, y, l, (u+l)/2);
	rhull = convex_hull(n, x, y,(u+l)/2, u);

	fhull = merge(lhull, rhull, int nl, int nr);

	return fhull;
}

struct node *dll_insert(int x[], int y[], int n)
{
	int i;

	if (n == 1) {
		struct node *new;
		new = (struct node *)malloc(sizeof(struct node));
		head = new;
		head->next = head;
		head->prev = head;
		return head;
	}

	else {
		for (i = 0; i < n; i++) {
			struct node *new;
			new = (struct node *)malloc(sizeof(struct node));
			new->x = x[i];
			new->y = y[i];
			new->next = head;
			new->prev = head->prev;
			head->prev->next = new;
			head->prev = new;
			head = new;
		}
		return head;
	}

}

void display(struct node *head) {
	struct node *ptr = head;

	while (ptr->next != head) {
		printf("x: %d y: %d\n", ptr->x, ptr->y);
		ptr = ptr->next;
	}
}

struct node  *merge(struct node *lhull, struct node *rhull, int nl, int nr) 
{
	int i, j, fg;
	struct node *pl, *pr;
	pl = first(lhull);
	pr = first(rhull);
	fg = 0;

	for (i = 0; i < nl; i++) {
		for (j = 0; j < nr; j++) {
			x = test(pl, pr);
			if (x) {
				fg = 1;
				break;
			}
			pr++;
		}
		if (fg == 1)
			break;
		pl++;
	}
}

struct node *test (struct node *a, struct node *b, struct node *rhull, struct node *lhull)
{
	float m;
	m = (b->y - a->y)/(b->x - a->x);
	y = m*(x - a->x) + a->y;

	while (rhull != NULL) {
		if ((m*(rhull->x - a->x)+a->y) > 0) {
			pos++;
		}
		else 
			neg++;
	}

	if ()

















